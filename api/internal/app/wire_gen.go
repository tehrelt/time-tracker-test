// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"em-test/internal/adapters"
	"em-test/internal/config"
	"em-test/internal/repositories"
	"em-test/internal/services"
	"fmt"
	"github.com/jmoiron/sqlx"
	"log"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func Init() (*App, func(), error) {
	configConfig := config.New()
	db, cleanup, err := initDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	usersRepository := repositories.NewUsersRepository(db)
	passportApi := repositories.NewPassportApi(configConfig)
	usersService := services.NewUserService(usersRepository, passportApi)
	usersAdapter := adapters.NewUsersAdapter(usersService)
	activityRepository := repositories.NewActivityRepository(db)
	activityService := services.NewActivityService(activityRepository)
	activityAdapter := adapters.NewActivityAdapter(activityService)
	app := New(configConfig, usersAdapter, activityAdapter)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func initDB(cfg *config.Config) (*sqlx.DB, func(), error) {

	host := cfg.DB.Host
	port := cfg.DB.Port
	user := cfg.DB.User
	pass := cfg.DB.Pass
	name := cfg.DB.Name

	cs := fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=disable", user, pass, host, port, name)
	log.Printf("connecting to %s\n", cs)

	db, err := sqlx.Open("postgres", cs)
	if err != nil {
		return nil, nil, err
	}
	if err := db.Ping(); err != nil {
		return nil, func() {
			db.Close()
		}, err
	}

	return db, func() { db.Close() }, nil
}

/*
 * People info
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"
)

var (
	names       = []string{"Иван", "Пётр", "Алексей", "Сергей", "Дмитрий", "Андрей", "Владимир", "Михаил", "Александр", "Николай"}
	surnames    = []string{"Иванов", "Петров", "Алексеев", "Сергеев", "Дмитриев", "Андреев", "Владимиров", "Михайлов", "Александров", "Николаев"}
	patronymics = []string{"Иванович", "Петрович", "Алексеевич", "Сергеевич", "Дмитриевич", "Андреевич", "Владимирович", "Михайлович", "Александрович", "Николаевич"}
	addresses   = []string{
		"г. Москва, ул. Ленина, д. 5, кв. 1",
		"г. Москва, ул. Ленина, д. 10, кв. 2",
		"г. Москва, ул. Ленина, д. 15, кв. 3",
		"г. Москва, ул. Ленина, д. 20, кв. 4",
		"г. Москва, ул. Ленина, д. 25, кв. 5",
		"г. Москва, ул. Ленина, д. 30, кв. 6",
		"г. Москва, ул. Ленина, д. 35, кв. 7",
		"г. Москва, ул. Ленина, д. 40, кв. 8",
		"г. Москва, ул. Ленина, д. 45, кв. 9",
		"г. Москва, ул. Ленина, д. 50, кв. 10",
	}
)

func InfoGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	qu := r.URL.Query()
	serie, err := strconv.Atoi(qu.Get("passportSerie"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	num, err := strconv.Atoi(qu.Get("passportNumber"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	log.Printf("serie: %d\t\tnum: %d", serie, num)

	info := &People{
		Surname:    surnames[(serie+num+(num/1000))%len(surnames)],
		Name:       names[((serie/10)+(num/10)+(num/10000))%len(names)],
		Patronymic: patronymics[((serie/100)+(num/100)+(num/100000))%len(patronymics)],
		Address:    addresses[((serie/1000)+(num/1000)+(num/10000000))%len(names)],
	}

	log.Printf("generated info: %v", info)

	body, err := json.Marshal(info)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(body)
}
